#!/usr/bin/env ruby

require 'optparse'
require 'ostruct'
require 'rubygems'


if __FILE__ == $0

  options = OpenStruct.new 
  options.load_path = []
  options.library = []
  options.platform = []
  options.outputs = []
  options.main = nil
  options.code = nil
  options.append = "" 
  options.debug = false
  options.opts = [] 

  opts = OptionParser.new do |opts|
    opts.banner = "Usage: rubyjs_gen [options] [file, [file, ...]]"
    opts.on("-r", "--require LIBRARY",
            "Require the LIBRARY before executing your script") do |lib|
      options.library << lib
    end
    opts.on("-I", "--load-path DIRECTORY", "Specifies load path") do |lib|
      options.load_path << lib
    end
    opts.on("-P", "--platform PLATFORM", "Specifies platform") do |plat|
      options.platform << plat
    end
    opts.on("-m", "--main CLASSNAME", "Entry point") do |main|
      raise "only one entry point allowed" if options.main
      options.main = main
    end
    opts.on("-e", "--eval STRING", "Eval code") do |code|
      raise "only one code allowed" if options.code
      options.code = code
    end
    opts.on("-a", "--append JSCODE", "Append Javascript code") do |append|
      options.append << append
      options.append << "\n"
    end
    opts.on("-o", "--output FILE", "Filename to write output to") do |out|
      options.outputs << out
    end
    opts.on("-O", "--opt OPTION", "Set a specific compiler option") do |out|
      options.opts << out
    end
    opts.on("--show-options", "--show-options", "Show all compiler options") do |out|
      puts "Compiler Options:"
      puts "  --opt NoArgumentArityChecks:: Disable generation of arity checking code"
      puts "  --opt CompactCode:: Enable (dangerous) JS code compaction"
      exit
    end
    opts.on("-d", "--debug", "Turn on debug mode") do |out|
      options.debug = true
    end
    opts.on_tail("-h", "--help", "Show this message") do
      puts opts
      exit
    end
  end

  args = ARGV.dup
  opts.parse!(args)

  # output to STDOUT by default
  if options.outputs.empty?
    options.outputs << "-"
  end

  if args.empty? and !options.code
    puts opts
    exit
  end

  $RUBYJS__LOAD_PATH = options.load_path.map {|i| File.expand_path(i)}  
  $RUBYJS__PLATFORM = options.platform
  $RUBYJS = true    # to distinguish between Ruby and RubyJS
  $RUBYJS__DEBUG = options.debug
  $RUBYJS__OPTS = options.opts

  # load RubyJS
  $LOAD_PATH.unshift(File.join(File.dirname(__FILE__), "src"))
  require 'rubyjs'

  # process requires

  eval_into(RubyJS::Environment) do |eval|
    options.library.each do |lib|
      require lib 
    end

    eval.call(options.code) if options.code

    args.each do |file|
      if file == '-'
        eval.call(STDIN.read)
      else
        eval.call(File.read(file))
      end
    end
  end

  gen = CodeGenerator.new
  str = "" 
  str << gen.generate()
  str << gen.encode("function main() { #<#{options.main}>.#<m:main>() }") if options.main
  str << options.append

  options.outputs.each do |outname| 
    if outname == "-"
      STDOUT << str
      STDOUT.flush
    else
      File.open(outname, 'w+') {|f| f << str }
    end
  end
end
